h2
  if (place.data.Overall.total[2019].rank==1)
    | #[+value(place.name)] has the highest Health Index score across England 
  else if (place.data.Overall.total[2019].rank==307)
    | #[+value(place.name)] has the lowest Health Index score across England 
  else
    | Health in #[+value(place.name)]
    if ((place.data.Overall.total[2019].rank>122)&(place.data.Overall.total[2019].rank<185))
      | close to the national average
    else if (place.data.Overall.total[2019].rank<184)
      | is in the top
      if (place.data.Overall.total[2019].rank/307 < 0.05)
        | #[+value(Math.ceil((place.data.Overall.total[2019].rank/307)*100)/100, {'FORMAT': '0%'})]
      else if (place.data.Overall.total[2019].rank/307 < 0.1)
        | #[+value(0.1, {'FORMAT': '0%'})]
      else if (place.data.Overall.total[2019].rank/307 < 0.2)
        | #[+value(0.2, {'FORMAT': '0%'})]
      else if (place.data.Overall.total[2019].rank/307 < 0.25)
        | #[+value(0.25, {'FORMAT': '0%'})]
      else if (place.data.Overall.total[2019].rank/307 < 0.3)
        | #[+value(0.3, {'FORMAT': '0%'})]    
      else if (place.data.Overall.total[2019].rank/307 < 0.4)
        | #[+value(0.4, {'FORMAT': '0%'})]
      else if (place.data.Overall.total[2019].rank/307 < 0.5)
        | #[+value(0.5, {'FORMAT': '0%'})]
    else if (place.data.Overall.total[2019].rank>185)
      | is in the bottom
      if ((1-(place.data.Overall.total[2019].rank/307))<0.05)
        | #[+value(Math.ceil((1-(place.data.Overall.total[2019].rank/307))*100)/100, {'FORMAT': '0%'})]
      else if ((1-(place.data.Overall.total[2019].rank/307))<0.1)
        | #[+value(0.1, {'FORMAT': '0%'})]
      else if ((1-(place.data.Overall.total[2019].rank/307))<0.2)
        | #[+value(0.2, {'FORMAT': '0%'})]
      else if ((1-(place.data.Overall.total[2019].rank/307))<0.25)
        | #[+value(0.25, {'FORMAT': '0%'})]
      else if ((1-(place.data.Overall.total[2019].rank/307))<0.3)
        | #[+value(0.3, {'FORMAT': '0%'})]
      else if ((1-(place.data.Overall.total[2019].rank/307))<0.4)
        | #[+value(0.4, {'FORMAT': '0%'})]
      else if ((1-(place.data.Overall.total[2019].rank/307))<0.5)
        | #[+value(0.5, {'FORMAT': '0%'})]
    | for England

p#subhead
  - var cha1 = place.data.Overall.total[2019].value - place.data.Overall.total[2018].value
  | #[+value(place.name)]'s Health Index score
  if ( Math.abs(cha1) < 0.3 )
    | remained relatively stable in the year before the coronavirus pandemic.
  else
    if ( cha1 < 0 )
      | decreased
    else
      | increased
    if ( Math.abs(cha1) > 2 )
      | considerably
    else if ( Math.abs(cha1) < 0.8 )
      | slightly
    | in the year before the coronavirus pandemic.

div#co-box
  if (place.data.Overall.total[2019].value>100)
    div#callout-bigno4d
      p
        | #[+value(place.data.Overall.total[2019].value, {'FORMAT': '0.0'})]
  else
    div#callout-bigno3d
      p
        | #[+value(place.data.Overall.total[2019].value)]
  div#callout-text
    p
      - var locChange = place.data.Overall.total[2019].value - place.data.Overall.total[2018].value
      - var engChange = england.data.Overall.total[2019].value - england.data.Overall.total[2018].value
      | #[+value(place.name)] has an overall Health Index score of #[+value(place.data.Overall.total[2019].value, {'FORMAT': '0.0'})],
      if (cha1==0)
        | which means it remains unchanged
      else
        | which is #[+value((cha1<0)? 'down' : 'up' )]
        | #[+value(Math.abs(locChange), {'FORMAT': '0.0'})] 
        | points 
      | compared with the previous year.

div#co-box
  div#callout-bigno3d
    p
      | #[+value(place.data.Overall.total[2019].rank, {'ORDINAL_NUMBER':true })]
  div#callout-text
    p
      | The area is ranked
      if (place.data.Overall.total[2019].rank != 1)
        | #[+value(place.data.Overall.total[2019].rank, {'ORDINAL_NUMBER':true })]
      | most healthy out of 307 local authority areas in England,
      | according to newly released data from 2019.

//- p#score
//-   | A score of 100 equates to the average across England when the index was first calculated in 2015.

mixin firstrank(i, met)
  if (Math.abs(sto[i][met])>5)
    | !{place.name}'s score for health relating to 
    | #[+value("&quot"+(sto[i].metric).toLowerCase()+"&quot")] is 
    if ( sto[i]['value'] > england.data[domLU[sto[i].metric]].subdomains[sto[i].metric].total[2019].value + 1 )
      | above
    else if ( sto[i]['value'] < england.data[domLU[sto[i].metric]].subdomains[sto[i].metric].total[2019].value - 1 )
      | below 
    else
      | close to
    | the average across England
  else
    | #[+value(place.name)]
    | has !{parent}'s
    if (Math.abs(sto[i][met+"_Reg"])!=1)
      | #[+value(Math.abs(sto[i][met+"_Reg"]), {'ORDINAL_TEXTUAL':true})]
    if (sto[i][met]>0)
      if (negs.includes((sto[i].metric).toLowerCase()))
        | best score for
      else
        | highest score for
    else
      if (negs.includes((sto[i].metric).toLowerCase()))
        | worst score for
      else
        | lowest score for
    | health relating to 
    | #[+value("&quot"+(sto[i].metric).toLowerCase()+"&quot")]

mixin firstchange(i, met)
  | #[+value(place.name)]
  if (Math.abs(sto[i][met])>5)
    | 's Health Index value for #[+value("&quot"+(sto[i].metric).toLowerCase()+"&quot")]
    if (sto[i][met.split(" ")[0]] > 0)
      | improved
    else
      | worsened
    if (met=="Change1year Rank")
      | by #[+value(Math.abs(sto[i]['Change1year']))] points
      | between 2018 and 2019
    else if (met=="Change4year Rank")
      | by #[+value(Math.abs(sto[i]['Change4year']))] points
      | in the four years between 2015 and 2019
  else
    | saw Englandâ€™s
    if (Math.abs(sto[i][met])>1)
      | #[+value(Math.abs(sto[i][met]), {'ORDINAL_TEXTUAL':true})]
    | greatest #[+value((sto[i][met]>0)?'improvement':'decline')] in
    | health relating to #[+value("&quot"+(sto[i].metric).toLowerCase()+"&quot")]
    if (met=="Change1year Rank")
      | between 2018 and 2019
    else if (met=="Change4year Rank")
      | in the four years between 2015 and 2019

mixin firstfirst(i, met)
  | Health in #[+value(place.name)] is strongest among measures relating to the 
  | #[+value("&quot"+(sto[i].metric).toLowerCase()+"&quot")] subdomain

mixin firstSen(i, met)
  if (i==0)
    | #[+firstfirst(i, met)]
  else if (met=="rank")
    | #[+firstrank(i, met)]
  else
    | #[+firstchange(i, met)]

mixin subd(i)
  | #[+value("&quot"+(sto[i].metric)+"&quot")] 
  synz {mode:'sequence'}
    syn
      | looks at
    syn
      | addresses
  if (twoindis.includes(sto[i].metric))
    eachz indic in indLU[sto[i].metric] with { separator:',', last_separator:' and' }
      | #[+value((uncap(indikey[indic])=='personal crime')? 'personal crime (crimes against individuals)' : uncap(indikey[indic]))]
  else
    eachz indic in indLU[sto[i].metric] with { separator:',', last_separator:', and' }
      | #[+value(uncap(indikey[indic]))]
  | .

mixin accessfirst(i)
  | #[+value(place.name)] has a Health Index score of 
  | #[+value(place.data[domLU[sto[i].metric]].subdomains[sto[i].metric].total[2019].value, {'FORMAT': '0.0'})]
  | for #[+value("&quot"+(sto[i].metric).toLowerCase()+"&quot")]. 
  | The average across #[+value(parent)] is 
  | #[+value(region.data[domLU[sto[i].metric]].subdomains[sto[i].metric].total[2019].value, {'FORMAT': '0.0'})],
  | while England has a score of 
  | #[+value(england.data[domLU[sto[i].metric]].subdomains[sto[i].metric].total[2019].value, {'FORMAT': '0.0'})].

mixin access(i)
  if (sto[i].value<100)
    | #[+value(place.name)]'s score is lower for
    | #[+value(indiSort(indis[sto[i].metric], -1, 'rank')[0])]
    | , with an index value of 
    | #[+value(indiSort(indis[sto[i].metric], -1, 'rank')[1])].
    if ( ['Access to services'].includes(sto[i].metric) )
      | The highest scoring indicator for this subdomain is 
      | #[+value(indiSort(indis[sto[i].metric], 0, 'rank')[0])]
      | , which has an index value of 
      | #[+value(indiSort(indis[sto[i].metric], 0, 'rank')[1])].
    else 
      | The index value for
      | #[+value(indiSort(indis[sto[i].metric], 0, 'rank')[0])]
      | in #[+value(place.name)] is
      | #[+value(indiSort(indis[sto[i].metric], 0, 'rank')[1])].
  else
    | #[+value(place.name)]'s score is higher for
    | #[+value(indiSort(indis[sto[i].metric], 0, 'rank')[0])]
    | , with an index value of 
    | #[+value(indiSort(indis[sto[i].metric], 0, 'rank')[1])].
    if ( ['Access to services'].includes(sto[i].metric) )
      | The lowest scoring indicator for this subdomain is 
      | #[+value(indiSort(indis[sto[i].metric], -1, 'rank')[0])]
      | , which has an index value of 
      | #[+value(indiSort(indis[sto[i].metric], -1, 'rank')[1])].
    else 
      | The index value for
      | #[+value(indiSort(indis[sto[i].metric], -1, 'rank')[0])]
      | in #[+value(place.name)] is
      | #[+value(indiSort(indis[sto[i].metric], -1, 'rank')[1])].

mixin topBot(i, yr)
  if (Math.abs(place.data[domLU[sto[i].metric]].subdomains[sto[i].metric].total[yr].rank/307) > 0.4)
    | close to average
  else
    if (place.data[domLU[sto[i].metric]].subdomains[sto[i].metric].total[yr].rank>0)
      | in the top
    else
      | in the bottom
    if (Math.abs(place.data[domLU[sto[i].metric]].subdomains[sto[i].metric].total[yr].rank/307) < 0.05)
      | #[+value((Math.ceil(Math.abs(place.data[domLU[sto[i].metric]].subdomains[sto[i].metric].total[yr].rank)*100/307)/100), {'FORMAT': '0%'})]
    else if (Math.abs(place.data[domLU[sto[i].metric]].subdomains[sto[i].metric].total[yr].rank/307) < 0.1)
      | #[+value(0.1, {'FORMAT': '0%'})]
    else if (Math.abs(place.data[domLU[sto[i].metric]].subdomains[sto[i].metric].total[yr].rank/307) < 0.15)
      | #[+value(0.15, {'FORMAT': '0%'})]
    else if (Math.abs(place.data[domLU[sto[i].metric]].subdomains[sto[i].metric].total[yr].rank/307) < 0.2)
      | #[+value(0.2, {'FORMAT': '0%'})]
    else if (Math.abs(place.data[domLU[sto[i].metric]].subdomains[sto[i].metric].total[yr].rank/307) < 0.25)
      | #[+value(0.25, {'FORMAT': '0%'})]
    else if (Math.abs(place.data[domLU[sto[i].metric]].subdomains[sto[i].metric].total[yr].rank/307) < 0.3)
      | #[+value(0.3, {'FORMAT': '0%'})]
    else if (Math.abs(place.data[domLU[sto[i].metric]].subdomains[sto[i].metric].total[yr].rank/307) < 0.4)
      | #[+value(0.4, {'FORMAT': '0%'})]
    else if (Math.abs(place.data[domLU[sto[i].metric]].subdomains[sto[i].metric].total[yr].rank/307) < 0.5)
      | #[+value(0.5, {'FORMAT': '0%'})]

mixin secondSenfirst(i, met)
  | #[+value(place.name)]'s highest score across all subdomains is 
  | #[+value(place.data[domLU[sto[i].metric]].subdomains[sto[i].metric].total[2019].value, {'FORMAT': '0.0'})]
  | for health relating to #[+value("&quot"+(sto[i].metric).toLowerCase()+"&quot")].

mixin secondSenA(i, met)
  - var subchaa = place.data[domLU[sto[i].metric]].subdomains[sto[i].metric].total[2019].value - ((met=="Change1year Rank")?place.data[domLU[sto[i].metric]].subdomains[sto[i].metric].total[2018].value:place.data[domLU[sto[i].metric]].subdomains[sto[i].metric].total[2015].value)
  - var actrankaa = ((met=="Change1year Rank")?place.data[domLU[sto[i].metric]].subdomains[sto[i].metric].total[2018].rank:place.data[domLU[sto[i].metric]].subdomains[sto[i].metric].total[2015].rank)
  - if (actrankaa<0) { actrankaa = actrankaa +308}
  - var actrankba = place.data[domLU[sto[i].metric]].subdomains[sto[i].metric].total[2019].rank
  - if (actrankba<0) { actrankba = actrankba +308}
  - var subrankchaa = actrankba - actrankaa
  | Between #[+value((met=="Change1year Rank")?'2018':'2015')] and 2019,
  | #[+value(place.name)]'s Health Index value for #[+value("&quot"+(sto[i].metric).toLowerCase()+"&quot")] 
  if (subchaa==0)
    | remained close
  else
    | went from 
    if (met=="Change1year Rank")
      | #[+value(place.data[domLU[sto[i].metric]].subdomains[sto[i].metric].total[2018].value, {'FORMAT': '0.0'})]
    else
      | #[+value(place.data[domLU[sto[i].metric]].subdomains[sto[i].metric].total[2015].value, {'FORMAT': '0.0'})]
  | to #[+value(place.data[domLU[sto[i].metric]].subdomains[sto[i].metric].total[2019].value, {'FORMAT': '0.0'})].
  if ((Math.sign(subchaa) != Math.sign(subrankchaa)) | (subchaa==0))
    | This means 
  else 
    | Despite the #[+value( (subchaa>0)? "increase" : "decrease" )],
  | #[+value(place.name)]
  if (met=="Change1year Rank")
    if ( topbotnp(i, 2018, sto) != topbotnp(i, 2019, sto) )
      | went from being #[+topBot(i, 2018)] to being
    else
      | remained
    | #[+topBot(i, 2019)] 
  else
    if ( topbotnp(i, 2015, sto) != topbotnp(i, 2019, sto) )
      | went from being #[+topBot(i, 2015)] to being
    else
      | remained
    | #[+topBot(i, 2019)]
  |for this subdomain.


mixin secondSenB(i, met)
  - var subcha = place.data[domLU[sto[i].metric]].subdomains[sto[i].metric].total[2019].value - ((met=="Change1year Rank")?place.data[domLU[sto[i].metric]].subdomains[sto[i].metric].total[2018].value:place.data[domLU[sto[i].metric]].subdomains[sto[i].metric].total[2015].value)

  - var actranka = ((met=="Change1year Rank")?place.data[domLU[sto[i].metric]].subdomains[sto[i].metric].total[2018].rank:place.data[domLU[sto[i].metric]].subdomains[sto[i].metric].total[2015].rank)
  - if (actranka<0) { actranka = actranka +308}
  - var actrankb = place.data[domLU[sto[i].metric]].subdomains[sto[i].metric].total[2019].rank
  - if (actrankb<0) { actrankb = actrankb +308}
  - var subrankcha = actrankb - actranka
  | #[+value(place.name)]'s score for #[+value("&quot"+(sto[i].metric).toLowerCase()+"&quot")] 
  if (subcha==0)
    | remained close to 
    | #[+value(place.data[domLU[sto[i].metric]].subdomains[sto[i].metric].total[2019].value, {'FORMAT': '0.0'})]
  else
    | #[+value( (subcha>0)? "improved" : (Math.abs(subcha)<0.4)?"decreased":"fell" )]
    | from 
    if (met=="Change1year Rank")
      | #[+value(place.data[domLU[sto[i].metric]].subdomains[sto[i].metric].total[2018].value, {'FORMAT': '0.0'})] in 2018
    else
      | #[+value(place.data[domLU[sto[i].metric]].subdomains[sto[i].metric].total[2015].value, {'FORMAT': '0.0'})] in 2015
    | to #[+value(place.data[domLU[sto[i].metric]].subdomains[sto[i].metric].total[2019].value, {'FORMAT': '0.0'})] in 2019.
  if ((Math.sign(subcha) != Math.sign(subrankcha)) | (subcha==0))
    | This means 
  else 
    | Despite the #[+value( (subcha>0)? "increase" : "decrease" )],
  | #[+value(place.name)]
  if (met=="Change1year Rank")
    if ( topbotnp(i, 2018, sto) != topbotnp(i, 2019, sto) )
      | went from being #[+topBot(i, 2018)] to being
    else
      | remained
    | #[+topBot(i, 2019)] 
  else
    if ( topbotnp(i, 2015, sto) != topbotnp(i, 2019, sto) )
      | went from being #[+topBot(i, 2015)] to being
    else
      | remained
    | #[+topBot(i, 2019)]
  | across England for this subdomain.

mixin secondSen(i, met)
  synz {mode:'sequence'}
    syn
      | #[+secondSenB(i, met)]
    syn
      | #[+secondSenA(i, met)]


mixin declineImp(i, change, index, impDec)
  //- - console.log("********")
  //- - console.log(' - - > > ',sto[i].metric)
  //- - console.log('change', change)
  //- - console.log('impDec', impDec)
  //- - console.log('indis[sto[i].metric]', indiSort(indis[sto[i].metric], 0, change))
  //- - console.log('indis[sto[i].metric', indis[sto[i].metric])
  - var poscha = indiSort(indis[sto[i].metric], index, change)[1]
  - var negcha = indiSort(indis[sto[i].metric], (-1-index), change)[1]
  if ((impDec=="improvement")&(poscha>0.5))
    | #[+value((index!=0)?'and':'')]
    if (negs.includes(indiSort(indis[sto[i].metric], index, change)[0]))
      | a decrease in
      | #[+value(indiSort(indis[sto[i].metric], index, change)[0])]
      | (the index improved by #[+value(poscha, {'FORMAT': '0.0'})] points)
    else
      | improvements in
      | #[+value( indiSort(indis[sto[i].metric], index, change)[0] )]
      | (an increase of #[+value( Math.abs(poscha), {'FORMAT': '0.0'})])
  else if (Math.abs(negcha)>0.5)
    | #[+value((index!=0)?'and':'')]
    if (negs.includes(indiSort(indis[sto[i].metric], (-1-index), change)[0]))
      | an increase in
      | #[+value(indiSort(indis[sto[i].metric], (-1-index), change)[0])]
      | (the index worsened by #[+value(Math.abs(negcha), {'FORMAT': '0.0'})] points)
    else
      | a decline in
      | #[+value(indiSort(indis[sto[i].metric], (-1-index), change)[0])]
      | (a decrease of #[+value(Math.abs(negcha), {'FORMAT': '0.0'})])

mixin however(i, change, impDec)
  if (impDec=="improvement")
    if ( indiSort(indis[sto[i].metric], -1, change)[1] < 0 )
      if (negs.includes(indiSort(indis[sto[i].metric], -1, change)[0]))
        | . However, there was also an increase in
        | #[+value(indiSort(indis[sto[i].metric], -1, change)[0])]
        | (the index worsened by #[+value(Math.abs(indiSort(indis[sto[i].metric], -1, change)[1]), {'FORMAT': '0.0'})] points)
      else
        | . However, there was a decline in
        | #[+value(indiSort(indis[sto[i].metric], -1, change)[0])]
        | (a decrease of #[+value(Math.abs(indiSort(indis[sto[i].metric], -1, change)[1]), {'FORMAT': '0.0'})])
  else
    if (indiSort(indis[sto[i].metric], -1, change)[1]>0)
      if (negs.includes(indiSort(indis[sto[i].metric], -1, change)[0]))
        | . However, there was an improvement in
        | #[+value(indiSort(indis[sto[i].metric], 0, change)[0])]
        | (an increase of #[+value(indiSort(indis[sto[i].metric], 0, change)[1], {'FORMAT': '0.0'})])
      else
        | . However, there was an decrease in
        | #[+value(indiSort(indis[sto[i].metric], 0, change)[0])]
        | (the index improved by #[+value(indiSort(indis[sto[i].metric], 0, change)[0], {'FORMAT': '0.0'})] points)

mixin driven(i, change, impDec)
  | #[+declineImp(i, change, 0, impDec)]
  | #[+declineImp(i, change, 1, impDec)]
  | #[+however(i, change, impDec)]
  | .

mixin lastSen(i, met)
  - var imprDecl = (met == 'rank') ? ( (sto[i]['Change4year']>0) ? 'improvement' : 'decline' ) : ( (sto[i][met.split(" ")[0]]>0) ? 'improvement' : 'decline' )
  | The change was largely driven by
  if (met=="Change1year Rank")
    | #[+driven(i, "Change1year", imprDecl)]
  else
    | #[+driven(i, "change4year", imprDecl)]

mixin chartTitle(i, met)
  | #[+firstSen(i, met)]

mixin chartSubTitle(i, met)
  if (i==0)
    | Health Index values for each subdomain in #[+value(place.name)], 2019
  else if (met=="rank")
    | Health Index values for the #[+value("&quot"+(sto[i].metric).toLowerCase()+"&quot")] subdomain 
    | across local authority areas in #[+value(parent)] and 
    | the average across England, 2019
  else 
    | Health Index values for the #[+value("&quot"+(sto[i].metric).toLowerCase()+"&quot")] subdomain, 
    | #[+value(place.name)], #[+value(parent)] and England,
    | 2015 to 2019

mixin thirdfirst(i, met)
  | The second highest scoring subdomain is #[+value("&quot"+ (orda[1].metric.toLowerCase()) +"&quot")], 
  | while #[+value(place.name)]'s worst score is for 
  | #[+value("&quot"+ (orda[orda.length-1].metric.toLowerCase()) +"&quot")].

- console.log('sto[0]', sto[0])
- console.log('sto[1]', sto[1])
- console.log('sto[2]', sto[2])
- console.log('sto[3]', sto[3])
mixin para(i, met)
  if (i == 0)
    p.general #[+secondSenfirst(i, met)]
    p.general #[+subd(i, met)]
    p.general #[+thirdfirst(i, met)]
  else if ( ['Access to green space', 'Access to services'].includes(sto[i].metric) )
    p #[+accessfirst(i, met)]
    p #[+subd(i, met)]
    p #[+access(i, met)]
  else
    p #[+subd(i, met)]
    p #[+secondSen(i, met)]
    p #[+lastSen(i, met)]

if (sto.length>0)
  - var met = whichMet(sto[0])
  if ( ['Access to green space', 'Access to services'].includes( sto[0].metric ) )
    - met = "rank"
  h4 #[+chartTitle(0, met)]
  h5 #[+chartSubTitle(0, met)]
  div#esc123
  div#catchthisdivforchart1
  div#legend1
  div#info1
  div#chart1
    h6 Source: Office for National Statistics â€“ Health Index for England
  div#source1
  p #[+para(0, met)]
  div.funky
if (sto.length>1)
  - var met = whichMet(sto[1])
  if ( ['Access to green space', 'Access to services'].includes( sto[1].metric ) )
    - met = "rank"
  h4 #[+chartTitle(1, met)]
  h5 #[+chartSubTitle(1, met)]
  div#esc123
  div#legend2
  div#info2
  div#chart2
    h6 Source: Office for National Statistics â€“ Health Index for England
  div#source2
  p #[+para(1, met)]
  div.funky
if (sto.length>2)
  - var met = whichMet(sto[2])
  if ( ['Access to green space', 'Access to services'].includes( sto[2].metric ) )
    - met = "rank"
  h4 #[+chartTitle(2, met)]
  h5 #[+chartSubTitle(2, met)]
  div#esc123
  div#legend3
  div#info3
  div#chart3
    h6 Source: Office for National Statistics â€“ Health Index for England
  div#source3
  p #[+para(2, met)]
  div.funky
if (sto.length>3)
  - var met = whichMet(sto[3])
  if ( ['Access to green space', 'Access to services'].includes( sto[3].metric ) )
    - met = "rank"
  h4 #[+chartTitle(3, met)]
  h5 #[+chartSubTitle(3, met)]
  div#esc123
  div#legend4
  div#info4
  div#chart4 
    h6 Source: Office for National Statistics â€“ Health Index for England
  div#source4
  p #[+para(3, met)]